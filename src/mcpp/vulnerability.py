from mcpp.parse import Sitter
from mcpp.queries import Q_ARGLIST, Q_IDENTIFIER, Q_FUNCTION_PARAMETER


def vd1(path, sitter: Sitter):
    """
    number of variables as parameters for callee functions
    """
    queries = {
        "Q_ARGLIST": Q_ARGLIST,
        "Q_IDENTIFIER": Q_IDENTIFIER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node

    vars_in_calls = []
    arg_lists = [m for m, tag in sitter.captures("Q_ARGLIST", root, lang) if tag == "args"]
    for arg_list in arg_lists:
        vars_in_calls.extend([m for m, _ in sitter.captures("Q_IDENTIFIER", arg_list, lang)])

    return {
        "VD1": len(vars_in_calls)
    }


def vd2(path, sitter: Sitter):
    """
    number of variables as parameters for callee functions
    """
    queries = {
        "Q_FUNCTION_PARAMETER": Q_FUNCTION_PARAMETER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node

    params = sitter.captures("Q_FUNCTION_PARAMETER", root, lang)
    return {
        "VD2": len(params)
    }
