from mcpp.parse import Sitter
from mcpp.queries import Q_ARGLIST, Q_IDENTIFIER, Q_FUNCTION_PARAMETER, Q_POINTER_EXPR, \
        Q_IDENTIFIER


def v1(path, sitter: Sitter):
    """
    number of variables as parameters for callee functions
    """
    queries = {
        "Q_ARGLIST": Q_ARGLIST,
        "Q_IDENTIFIER": Q_IDENTIFIER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node

    vars_in_calls = []
    arg_lists = [m for m, tag in sitter.captures("Q_ARGLIST", root, lang) if tag == "args"]
    for arg_list in arg_lists:
        vars_in_calls.extend([m for m, _ in sitter.captures("Q_IDENTIFIER", arg_list, lang)])

    return {
        "V1": len(vars_in_calls)
    }


def v2(path, sitter: Sitter):
    """
    number of variables as parameters for callee functions
    """
    queries = {
        "Q_FUNCTION_PARAMETER": Q_FUNCTION_PARAMETER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node

    params = sitter.captures("Q_FUNCTION_PARAMETER", root, lang)
    return {
        "V2": len(params)
    }


def v3_v4(path, sitter: Sitter):
    """
    V3: number of pointer arithmetic operations
    V4: number of variables involved in pointer arithmetics
    """
    queries = {
        "Q_POINTER_EXPR": Q_POINTER_EXPR,
        "Q_IDENTIFIER": Q_IDENTIFIER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node
    arith_ops = [
        "+", "++", "+=",
        "-", "--", "-=",
        "*=",  # * excluded (same as pointer reference)
        "/", "/=",
        "^", "^=",
        "&=",  # & excluded (same as pointer dereference)
        "|", "|="
    ]

    pointer_arith = []
    pointer_arith_vars = []
    for pointer, _ in sitter.captures("Q_POINTER_EXPR", root, lang):
        if any(arith in pointer.parent.text.decode() for arith in arith_ops):
            pointer_arith.append(pointer)
            arith_vars = [m for m,_ in sitter.captures("Q_IDENTIFIER", pointer.parent, lang)]
            pointer_arith_vars.extend(arith_vars)
    
    return {
        "V3": len(pointer_arith),
        "V4": len(pointer_arith_vars)
    }
