from mcpp.parse import Sitter
from mcpp.queries import Q_ARGLIST, Q_IDENTIFIER

def vd1(path, sitter: Sitter, metrics=None):
    """
    number of parameter variables
    = number of variables that are a parameter of a function call
    """
    queries = {
        "Q_ARGLIST": Q_ARGLIST,
        "Q_IDENTIFIER": Q_IDENTIFIER
    }

    sitter.add_queries(queries)
    tree, lang = sitter.parse_file(path)
    root = tree.root_node

    if metrics is None:
        metrics = {}
    vars_in_calls = []
    arg_lists = [m for m, tag in sitter.captures("Q_ARGLIST", root, lang) if tag == "args"]
    for arg_list in arg_lists:
        vars_in_calls.extend([m for m, _ in sitter.captures("Q_IDENTIFIER", arg_list, lang)])

    return {
        "VD1": len(vars_in_calls)
    }
